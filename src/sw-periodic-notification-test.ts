/// <reference lib="webworker" />
declare const self: ServiceWorkerGlobalScope;

import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching';
import { clientsClaim } from 'workbox-core';

// Ensure the service worker takes control of the page as soon as possible.
self.skipWaiting();
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST || []);

// Clean up old caches
cleanupOutdatedCaches();

function showPeriodicNotification() {
    const time = new Date().toLocaleTimeString();
    console.log(`Service Worker: Attempting to show notification at ${time}`);
    if (Notification.permission === 'granted') {
        self.registration.showNotification('Periodic SW Test', {
            body: `Notification from Service Worker at ${time}`,
            icon: '/pwa-192x192.png', // Optional: path to an icon
            tag: 'sw-periodic-test-notification' // Optional: groups notifications
        });
    } else {
        console.log('Service Worker: Notification permission not granted.');
        // If permission is 'default', you might want to request it from your app's UI
        // when the app is active. Requesting from SW directly is not always reliable.
        // If permission is 'denied', you cannot request it again from the SW.
    }
}

const sixtySecondsInMs = 60 * 1000;

// Start the interval when the service worker script is evaluated
const intervalId = setInterval(showPeriodicNotification, sixtySecondsInMs);

self.addEventListener('activate', () => {
    console.log('Periodic Notification Test Service Worker activated. Interval task is running.');
    // Attempt to show a notification immediately on activation if permission is granted
    // This helps confirm the SW is active and permissions are set.
    if (Notification.permission === 'granted') {
        self.registration.showNotification('Service Worker Activated', {
            body: 'Periodic notification test SW is now active.',
            icon: '/pwa-192x192.png'
        });
    } else if (Notification.permission === 'default') {
        console.log('Service Worker activated. Notification permission is default. Please grant permission through the app UI or browser settings.');
    } else {
        console.log('Service Worker activated. Notification permission is denied.');
    }
});

// Optional: A way to stop the interval if needed, e.g., via a message from the client
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'STOP_PERIODIC_NOTIFICATION_TEST') {
        clearInterval(intervalId);
        console.log('Service Worker: Periodic notification test interval stopped by client message.');
    }
});
